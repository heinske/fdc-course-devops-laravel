FROM php:7.3.6-fpm-alpine3.9 as builder

# Instala as dependências necessárias
RUN apk add nodejs npm
RUN apk add --no-cache openssl
RUN apk add --no-cache shado

# Instala o composer e o dockerize
RUN curl -sS https:///getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
ENV DOCKERIZE_VERSION v0.6.1
RUN wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz \
    && rm dockerize-alpine-linux-amd64-$DOCKERIZE_VERSION.tar.gz

# Traz o código fonte para dentro da imagem
WORKDIR /var/www
RUN rm -rf /var/www/html
RUN ln -s public html 
COPY . /var/www

# Instala as dependências do composer e npm
RUN composer install && \
             cp .env.example .env && \
             php artisan key:generate && \
             php artisan config:cache 

RUN npm install

# Cria a imagem final de produção
FROM php:7.3.6-fpm-alpine3.9

# Instala as dependências necessárias para produção
RUN apk add bash mysql-client 
RUN docker-php-ext-install pdo pdo_mysql

# Copia o código fonte da build
WORKDIR /var/www
RUN rm -rf /var/www/html
COPY --from=builder /var/www .

# Seta as permissões corretas
RUN chown -R www-data:www-data /var/www
RUN usermod -u 1000 www-data
USER www-data

EXPOSE 9000
ENTRYPOINT ["php-fpm"]
